name: Build, Test, and Publish Python Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install and configure Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -
        poetry config virtualenvs.create false

    - name: Install dependencies and run linting
      run: |
        poetry install
        poetry run pylint $(git ls-files '*.py')
        poetry run flake8 .

    - name: Check if version exists on PyPI
      id: check-version
      run: |
        VERSION=$(poetry version --short)
        if curl --silent --fail "https://pypi.org/project/lib-ml-group3/$VERSION/"; then
          echo "Version $VERSION already exists on PyPI."
          echo "::set-output name=exists::true"
        else
          echo "Version $VERSION does not exist on PyPI."
          echo "::set-output name=exists::false"

    - name: Bump version and push tag
      if: steps.check-version.outputs.exists == 'false'
      run: |
        poetry version patch
        VERSION=$(poetry version --short)
        if curl --silent --fail "https://pypi.org/project/lib-ml-group3/$VERSION/"; then
          echo "Version $VERSION already exists on PyPI."
          echo "::set-output name=exists::true"
        else
          echo "Version $VERSION does not exist on PyPI."
          echo "::set-output name=exists::false"
        fi
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "Bump version to $VERSION"
        git tag "v$VERSION"
        git push origin main --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and publish to PyPI
      if: steps.check-version.outputs.exists == 'false'
      run: |
        poetry build
        poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}

    - name: Clean up
      run: |
        rm -rf dist
